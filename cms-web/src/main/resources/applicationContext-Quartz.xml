<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd "
	default-autowire="byName">

	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
	<bean name="quartzScheduler" lazy-init="false"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory">
			<bean class="com.dou.book.quartz.SpringBeanJobFactory" />
		</property>
		<property name="dataSource">
			<!-- 数据源引用指向，包含集群所需的所有表 -->
			<ref bean="dataSource" />
		</property>
		<!-- spring管理的service需要放到这里，才能够注入成功 -->
		<property name="schedulerContextAsMap">
			<map>
				<entry key="bookService" value-ref="bookService" />
			</map>
		</property>
		<!-- applicationContextSchedulerContextKey： 是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中把spring上下 
			文以key/value的方式存放在了quartz的上下文中了，可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文 -->
		<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
		<!-- configLocation：用于指明quartz的配置文件的位置 -->
		<property name="configLocation" value="classpath:quartz/quartz.properties" />
		<!-- QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
		<property name="startupDelay" value="10" />
		<!-- 这个是可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />
		<!-- 监控 -->
		<property name="exposeSchedulerInRepository" value="true" />
		<!-- 执行任务 -->
		<!-- <property name="taskExecutor" ref="taskExecutor" />-->

		<!-- Triggers集成 -->
		<property name="triggers">
			<list>
				<ref bean="trigger_PriceTrendDispose" />
			</list>
		</property>
	</bean>

	<!-- 关注产品价格走势-任务 -->
	<bean id="jobDetail_PriceTrendDispose"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass"
			value="com.dou.book.quartz.ProductTableDisposeJob" />
		<property name="durability" value="true" />
	</bean>
	<bean id="trigger_PriceTrendDispose"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDetail_PriceTrendDispose" />
		<!-- 每天凌晨三点执行产品价格走势定时任务 -->
		<property name="cronExpression" value="0 13 16 ? * *" />
	</bean>

</beans>